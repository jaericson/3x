#!/usr/bin/env bash
# 3x-setup -- Setup a new computational experiment
# 
# > 3x setup _3X_ROOT \
# >    --program  [ 'COMMAND' ]...                                           \
# >    --inputs   [ NAME[:TYPE]=VALUE1[,VALUE2] ]...                         \
# >    --outputs  [ --extract '...{{NAME[(UNIT)][:TYPE] =~ REGEXP}}...' ]... \
# >               [ --file NAME:TYPE=FILENAME ]...
# 
# Example:
# setup the experiment
# > 3x setup sorting-benchmark \
# >     --program '
# >       case $impl in
# >       coreutils) ./gen-input | sort ;;
# >            perl) ./gen-input | perl -e '\''print \$_ foreach sort <>;'\'' ;;
# >          python) ./gen-input | python -c '\''
# >                    import sys
# >                    sys.stdout.writelines(sorted(sys.stdin.readlines()))
# >                    '\'' ;;
# >               *) exit 2 ;;
# >       esac
# >     ' \
# >     --inputs impl=coreutils,perl,python \
# >                 N=1000,10000,100000,1000000 \
# >     --outputs --extract 'Elapsed.*time.*: {{time(s) =~ [0-9:.]+}}' \
# >     #
# add some files
# > echo 'seq $N | shuf' >input/N=/gen-input
# > chmod +x input/N=/gen-input
# then, start the GUI
# > cd sorting-benchmark
# > 3x gui
# 
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2013-01-24
set -eu
shopt -s extglob

[ $# -gt 0 ] || usage "$0" "_3X_ROOT is missing"

_3X_ROOT=$1; shift

# check if _3X_ROOT was sane
case $_3X_ROOT in
    --@(program|@(input|output)s))
        usage "$0" "_3X_ROOT is missing"
        ;;
esac

# prepare a script
tmp=$(mktemp -d "${TMPDIR:-/tmp}"/3x-setup.XXXXXX)
trap "rm -rf $tmp" EXIT

# generate a experiment setup script
{
    be-quiet +4 || set -x
    echo "set -eu"
    be-quiet +1 || echo "set -x"
    echo "export _3X_SETUP_IN_PROGRESS=true"
    . "$TOOLSDIR"/sanity-checks.sh
    # create the _3X_ROOT directory
    escape-args-for-shell 3x-init "$_3X_ROOT"
    escape-args-for-shell cd "$_3X_ROOT"
    # map command line args to 3x-define commands
    generate-definition() {
        case $what in
            program)
                echo "$(
                escape-args-for-shell  3x-define $what "${how[@]}"
                ) || true"
                ;;
            input|output)
                escape-args-for-shell  3x-define $what \
                    "$Name${Unit:+($Unit)}${Type:+:$Type}" "${how[@]}"
                ;;
            *)
                error "$what: Unrecognized to generate definition"
                ;;
        esac
    }
    inputArgs=()
    what=
    for arg; do
        how=()
        # detect section leader arguments
        case $arg in
            --*)
                a=${arg#--}
                case $a in
                    program|inputs|outputs)
                        what=${a%s}
                        whatOutput=
                        continue
                        ;;
                    extract|file)
                        if [[ $what = output ]]; then
                            whatOutput=$a
                            continue
                        fi
                        ;;
                esac
                usage "$0" "Unknown argument $arg"
                ;;
        esac
        if [ -z "$what" ]; then
            msg +1 "Assuming --program for $arg"
            what=program
        fi
        # translate $arg to the appropriate command
        case $what in
            program)
                how=("$arg")
                Name= # no name for programs
                Unit= # no unit for programs
                Type= # no type for programs
                generate-definition
                ;;

            input)
                # process inputs later after coalescing values by name
                inputArgs+=("$arg")
                ;;

            output)
                how=("$whatOutput") 
                case $whatOutput in
                    extract)
                        WHITESPACE=$'[ \t]'
                        LDELIM='{{' MDELIM='=~' RDELIM='}}'
                        regexpBefore=${arg%%"$LDELIM"*}
                        rest=${arg#"$regexpBefore$LDELIM"}
                        rest=${rest/#+([ 	])/}
                        Name=${rest%%"$MDELIM"*}
                        rest=${rest#"$Name$MDELIM"}
                        rest=${rest/#+([ 	])/}
                        Name=${Name/%+([ 	])/}
                        regexp=${rest%%"$RDELIM"*}
                        regexp=${regexp/%+([ 	])/}
                        regexpAfter=${rest#*"$RDELIM"}
                        how+=("$regexpBefore" "$regexp" "$regexpAfter")
                        # TODO support multiple Names in a single extract pattern
                        extractUnitFromName
                        extractTypeFromName
                        checkIfNameIsSane "$Name" "--outputs $Name"
                        generate-definition
                        ;;

                    file)
                        Name=${arg%%"="*}
                        how+=("${arg#"$Name="}")
                        extractUnitFromName
                        extractTypeFromName
                        checkIfNameIsSane "$Name" "--outputs $Name"
                        [ -n "$Type" ] || usage "$0" "Missing MIMETYPE for --outputs --file $Name"
                        checkIfMimeTypeIsValid "$Type" "--outputs $Name:$Type"
                        [ -z "$Unit" ] || usage "$0" "--outputs --file $Name cannot have UNIT defined"
                        generate-definition
                        ;;

                    *)
                        usage "$0" "Missing type of --outputs for $arg: must be either --extract or --file"
                        ;;
                esac
                ;;
        esac
    done
    # coalesce --inputs  x=a,b  y=c,d  x=e,f,g  -->  x=a,b,e,f,g  y=c,d
    what=input
    if [[ ${#inputArgs[@]} -gt 0 ]]; then
        inputArgsCoalesced=$(coalesce-values-by-name = , "${inputArgs[@]}")
        eval "set -- $inputArgsCoalesced"
    else
        set --
    fi
    for arg; do
        Name=${arg%%=*}
        IFS=, how=(${arg#$Name=})
        extractUnitFromName
        extractTypeFromName
        checkIfNameIsSane "$Name" "$Name"
        for value in "${how[@]}"
        do checkIfValueIsSane "$value" "$Name" "--inputs $Name=$value"
        done
        generate-definition
    done
    echo "3x-define sync"
} >"$tmp"/setup-script

msg +2 "Setting up new experiment"
be-quiet +2 ||
    while read -r line; do msg +2 "  $line"; done <"$tmp"/setup-script

# and run it to bootstrap an experiment
bash "$tmp"/setup-script
msg "Finished experiment setup at ${_3X_ROOT%/}/"
msg
msg "# You can start the GUI by running:"
msg "_3X_ROOT=$(escape-args-for-shell "$_3X_ROOT") \\"
msg "$_3X_COMMAND gui"
