#!/usr/bin/env bash
# 3x-define -- Incrementally define the experiment schema
# 
# > 3x define [-f] WHAT NAME HOW...
# 
# To register the command for the program, use the following command:
# > 3x define program  COMMAND...
# 
# To add or modify input variables, use the following command:
# > 3x define input    NAME[(UNIT)][:TYPE] VALUE1 [VALUE2]...
# 
# To add or modify output variables, use one of the following commands:
# > 3x define output   NAME[(UNIT)][:TYPE] extract  REGEXP_BEFORE  REGEXP  REGEXP_AFTER  [FROM_FILENAME]...
# > 3x define output   NAME[(UNIT)][:TYPE] extract  REGEXP_BEFORE  REGEXP  REGEXP_AFTER  --running COMMAND --caching FILENAME
# > 3x define output   NAME:MIMETYPE       file     FILENAME
# 
# Finally, to reflect the schema changes to other parts of 3X, e.g., migrating
# the results index, queues and extracting values from past records, use:
# > 3x define sync
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2013-01-24
set -eu

. find-run-archive.sh

_3X_ROOT=$(3x-findroot)
export _3X_ROOT

# process options
ForceRedefine=false
while getopts "f" o; do
    case $o in
        f)
            ForceRedefine=true
            ;;
    esac
done
shift $(($OPTIND - 1))

# process arguments
[ $# -gt 0 ] || usage "$0" "WHAT to define is missing"
What=$1; shift

case $What in
    input|output)
        [ $# -gt 0 ] || usage "$0" "NAME is missing"
        Name=$1; shift
        ;;
esac

. sanity-checks.sh

# TODO expand glob pattern in any arguments?

cd "$_3X_ROOT"

case $What in
    program)
        dir="program"
        runner="$dir/$_3X_API_RUNNER"
        $ForceRedefine || ! [ -e "$runner" ] || error "program already defined"
        mkdir -p "$dir"
        touch "$dir"/env
        {
            echo "#!/usr/bin/env bash"
            for Command; do
                echo "$Command"
            done
        } >"$runner"
        chmod +x "$runner"
        # record schema definition changes
        touch .3x/define.changed-program
        ;;

    input)
        extractUnitFromName
        extractTypeFromName nominal # TODO default is nominal, but may we can try recognition
        dir="input/$Name="
        checkIfNameIsSane "$Name" "$dir"
        $ForceRedefine || ! [ -d "$dir" ] || error "$Name: input already defined"
        for Value; do
            checkIfValueIsSane "$Value" "$Name" "$dir/$Value"
        done
        # TODO check validity of $Unit, $Type
        for Value; do
            vdir="$dir/$Value"
            mkdir -p "$vdir"
            touch "$vdir"/env
        done
        [ -z "$Unit" ] || echo "$Unit" >"$dir"/unit
        echo "$Type" >"$dir"/datatype
        # TODO decide what to do with the other ones not mentioned
        # record schema definition changes
        echo "$Name=$1" >>.3x/define.changed-input
        ;;

    output)
        outputType=${1:-}; shift || true
        extractUnitFromName
        extractTypeFromName
        dir="output/$Name"
        checkIfNameIsSane "$Name" "$dir"
        extractor="$dir/$_3X_API_EXTRACTOR"
        $ForceRedefine || ! [ -x "$extractor" ] || error "$Name: output already defined"
        # TODO check validity of $Unit, $Type
        case $outputType in 
            extract)
                [ $# -gt 0 ] || usage "$0" "Missing REGEXP_BEFORE"
                [ $# -gt 1 ] || usage "$0" "Missing REGEXP"
                [ $# -gt 2 ] || usage "$0" "Missing REGEXP_AFTER"
                RegExps=("$1" "$2" "$3"); shift 3
                [ $# -gt 0 ] || set -- rusage stdout stderr  # filenames to scan
                # handle options
                o_running=
                o_caching=
                case $1 in
                    --*)
                        while o=${1:-}; shift 2>/dev/null; do
                            case $o in
                                --running|--caching)
                                    oName=${o#--}
                                    declare "o_$oName=$1"
                                    shift
                                    ;;
                                *)
                                    error "$o: unrecognized argument"
                            esac
                        done
                esac
                : ${Type:=ratio} # default type is ratio
                mkdir -p "$dir"
                {
                    echo "#!/usr/bin/env bash"
                    echo "set -eu"
                    if [ -n "$o_running" ]; then
                        if [ -n "$o_caching" ]; then
                            f=$(escape-args-for-shell outputs/.shared/"$o_caching")
                            t=$(escape-args-for-shell outputs/.shared/."$o_caching".\$\$)
                            echo "if [ -s $f ]"
                            echo "then cat $f"
                            echo "else"
                            echo "    mkdir -p outputs/.shared"
                            echo "    touch $f"
                            echo "    set -o pipefail"
                            echo "    {"
                            echo "$o_running"
                            echo "    } | tee $t"
                            echo "    mv -f $t $f"
                            echo "fi |"
                        else
                            echo "$o_running |"
                        fi
                    else
                        echo "$(escape-args-for-shell cat "$@") |"
                    fi
                    echo -n "extract-regexp "; escape-args-for-shell "${RegExps[@]}"
                } >"$extractor"
                ;;
            file)
                [ $# -gt 0 ] || usage "$0" "Missing FILENAME"
                [ $# -eq 1 ] || usage "$0" "Too many FILENAMEs"
                [ -n "$Type" ] || usage "$0" "Missing MIMETYPE"
                checkIfMimeTypeIsValid "$Type" "$Type"
                [ -z "$Unit" ] || usage "$0" "($Unit): file output variables cannot have UNIT defined"
                mkdir -p "$dir"
                {
                    echo "#!/bin/sh -e"
                    f=$(escape-args-for-shell "workdir/$1")
                    echo "[ -e $f ] && echo $f"
                } >"$extractor"
                ;;
            *)
                usage "$0" "Unknown output type $outputType: must be \`file' or \`extract'"
                ;;
        esac
        chmod +x "$extractor"
        if [ -n "$Unit" ]; then
            echo "$Unit" >"$dir"/unit
        else
            rm -f "$dir"/unit
        fi
        echo "$Type" >"$dir"/datatype
        # record schema definition changes
        echo "$Name" >>.3x/define.changed-output
        ;;


    sync) # maintain indexes, queues, extract data
        if [[ -e .3x/define.changed-input || -e .3x/define.changed-output ]]; then
            # reflect new input/output to results index's schema and migrate data
            3x-index migrate
        fi

        if [[ -e .3x/define.changed-input ]]; then
            # migrate existing queues
            for _3X_QUEUE in run/queue/*/; do
                # TODO pass assumed values for newly introduced input variables for past runs
                queue migrate
            done
        fi

        if [[ -e .3x/define.changed-output ]]; then
            # extract output from existing runs
            outputsPatt=$(tr '\n' '|' <.3x/define.changed-output)
            outputsPatt="@(${outputsPatt%|})"
            _3X_RESCAN_ONLY=$outputsPatt \
            3x-rescan -f
        fi

        rm -f .3x/define.changed-*
        ;;

esac
