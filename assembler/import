#!/usr/bin/env bash
# import -- import an input directory
# Usage: cd $EXPROOT;  EXPWD=OUTPUTDIR import INPUTDIR...
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2012-11-01
set -eu

[ $# -gt 0 ]        || usage "$0" "At least one INPUTDIR must be given"
[ -n "${EXPWD:-}" ] || usage "$0" "EXPWD must be defined"
EXPWDabbrev=${EXPWD#$PWD/}

shopt -s extglob

_recordCopiedFiles() {
    sed -E 's/^/  copying /;  s#([â€˜ ])run/.*/(workdir/|measures/|args)#\1\2#' |
    tee -a "$EXPWD"/assembly
}
recordCopiedFiles() { _recordCopiedFiles >/dev/null; }
be-quiet +1 || recordCopiedFiles() { _recordCopiedFiles >&2; }
be-quiet +3 || set -x
copyFilesTo() {
    local dst=$1; shift
    local src=$1; shift
    # rest are find predicates for matching excluded children of $src
    [ $# -eq 0 ] || set -- -o "$@"
    # prepare destination and copy files
    findcmd=(
    find "$src"/{,.}*  -maxdepth 0 ! \( \
            -type d \( -name '.' -o -name '..' \
                    -o -name '?*=*' -o -path '*=/*' \) "$@" \
        \)
    )
    # check if there are files to copy
    [[ $("${findcmd[@]}" 2>&1 | wc -l) -gt 0 ]] || return 0
    # and only invoke cp when necessary
    mkdir -p -- "$dst"
    "${findcmd[@]}" -print0 |
    {
        set -o pipefail
        xargs -0 -I{} -- cp -av {} "$dst" |
        # TODO check and emit warning if any files get overwritten
        recordCopiedFiles >&2
    }
}

for path in "$@"; do
    if ! grep -qF "$path" "$EXPWD"/assembly; then
        msg " importing $path"
        echo "$path" >>"$EXPWD"/assembly
        if [ -d "$path" ]; then
            # a directory containing files and nested patterns
            case $path in
                @(input|program)/*)
                    # copy files
                    copyFilesTo "$EXPWDabbrev"/workdir/ "$path" \
                        -type f \( -name 'env' \
                                -o -name 'args' -o -name '+args' -o -name 'args+' \
                                -o -name 'unit' -o -name 'datatype' \
                                \) \
                        #
                    # environment variables
                    for f in env; do
                        if [ -r "$path"/$f ]; then
                            msg +1 "  appending $path/$f"
                            no-comments "$path"/$f >>"$EXPWD"/$f
                        fi
                    done
                    # command-line arguments
                    for a in "$path"/{args,+args,args+}; do
                        if [ -r "$a" ]; then
                            case ${a##*/} in
                                args) # replace arguments
                                    ! [ -e "$EXPWD"/args ] || error "$a cannot overwrite already existing args"
                                    (
                                    set -o pipefail
                                    cp -avn "$a" "$EXPWDabbrev"/args |
                                    recordCopiedFiles >&2
                                    )
                                    ;;
                                args+) # append arguments
                                    msg +1 "  appending $a"
                                    echo "  appending $a" >>"$EXPWD"/assembly
                                    cat "$a" >>"$EXPWD"/args
                                    ;;
                                +args) # prepend arguments
                                    msg +1 "  prepending $a"
                                    echo "  prepending $a" >>"$EXPWD"/assembly
                                    if [ -z "${tmp:-}" ]; then
                                        tmp=$(mktemp /tmp/expkit-import.XXXXXX)
                                        trap "rm -f $tmp" EXIT
                                    fi
                                    cat "$a" "$EXPWD"/args >$tmp
                                    cat $tmp >"$EXPWD"/args
                                    ;;
                            esac
                        fi
                    done
                    ;;
                output/*)
                    m=$path
                    m=${m#output/}
                    m=${m%%/*}
                    # copy files of output
                    copyFilesTo "$EXPWDabbrev"/measures/"$m" "$path" \
                        -type f \( -name 'datatype' \
                                \) \
                        #
                    ;;
            esac
        else
            error "$path: Not a directory; Only directories can be imported"
        fi
    fi
done
