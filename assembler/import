#!/usr/bin/env bash
# import -- import contents of input directories to current working directory
# 
# > export _3X_ROOT=$(3x-findroot)
# > import INPUTDIR...
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2012-11-01
# Rewritten: 2013-07-09
set -eu
shopt -s extglob

[ $# -gt 0 ] || usage "$0" "At least one INPUTDIR must be given"

# destination is current working directory, and we'll use repository-relative paths
DestDir=$PWD
cd "$_3X_ROOT"

# prepare logging
Log="$DestDir"/assembly
logmsg() {
    msg +1 "$@"
    echo "$@" >>"$Log"
}
_recordCopiedFiles() {
    sed 's/^/  copying /;  s:'"$DestDir"'/::;  s:[‘’]::g' |
    tee -a "$Log"
}
recordCopiedFiles() { _recordCopiedFiles >/dev/null; }
be-quiet +1 || recordCopiedFiles() { _recordCopiedFiles >&2; }
be-quiet +3 || set -x

copyFilesTo() {
    local dst=$1; shift
    local src=$1; shift
    # rest are find predicates for matching excluded children of $src
    [ $# -eq 0 ] || set -- -o "$@"
    # prepare destination and copy files
    findcmd=(
    find "$src"/{,.}*  -maxdepth 0 ! \( \
            -type d \( -name '.' -o -name '..' \
                    -o -name '?*=*' -o -path '*=/*' \) "$@" \
        \)
    )
    # check if there are files to copy
    [[ $("${findcmd[@]}" 2>&1 | wc -l) -gt 0 ]] || return 0
    # and only invoke cp when necessary
    mkdir -p -- "$dst"
    "${findcmd[@]}" -print0 |
    {
        set -o pipefail
        xargs -0 -I{} -- cp -avH {} "$dst" |
        # TODO check and emit warning if any files get overwritten
        recordCopiedFiles
    }
}

# filter given paths according to extglob pattern $_3X_IMPORT_ONLY when available
if [[ -n "${_3X_IMPORT_ONLY:-}" ]]; then
    filteredPaths=()
    for path; do
        [[ "$path" == $_3X_IMPORT_ONLY ]] || continue
        filteredPaths+=("$path")
    done
    set --; [[ ${#filteredPaths[@]} -eq 0 ]] || set -- "${filteredPaths[@]}"
fi

for path in "$@"; do
    msg " importing $path"
    if [ -d "$path" ]; then
        # a directory containing files and nested patterns
        case $path in
            program@(|/*)|input/*)
                # copy files
                copyFilesTo "$DestDir"/workdir/ "$path" \
                    -type f \( -name 'env' \
                            -o -name 'args' -o -name '+args' -o -name 'args+' \
                            -o -name 'unit' -o -name 'datatype' \
                            \) \
                    #
                # environment variables
                for f in env; do
                    if [ -r "$path"/$f ]; then
                        logmsg "  appending $path/$f"
                        no-comments "$path"/$f >>"$DestDir"/$f
                    fi
                done
                # command-line arguments
                for a in "$path"/{args,+args,args+}; do
                    if [ -r "$a" ]; then
                        case ${a##*/} in
                            args) # replace arguments
                                ! [ -e "$DestDir"/args ] ||
                                    logmsg "  overriding with $a"
                                (
                                set -o pipefail
                                cp -av "$a" "$DestDir"/args |
                                recordCopiedFiles
                                )
                                ;;
                            args+) # append arguments
                                logmsg "  appending $a"
                                cat "$a" >>"$DestDir"/args
                                ;;
                            +args) # prepend arguments
                                logmsg "  prepending $a"
                                if [ -z "${tmp:-}" ]; then
                                    tmp=$(mktemp /tmp/3x-import.XXXXXX)
                                    trap "rm -f $tmp" EXIT
                                fi
                                cat "$a" "$DestDir"/args >$tmp
                                cat $tmp >"$DestDir"/args
                                ;;
                        esac
                    fi
                done
                ;;
            output/*)
                m=$path
                m=${m#output/}
                m=${m%%/*}
                # copy files of output
                copyFilesTo "$DestDir"/outputs/"$m" "$path" \
                    -type f \( -name 'unit' -o -name 'datatype' \
                            \) \
                    #
                ;;
        esac
    else
        error "$path: Not a directory; Only directories can be imported"
    fi
done
