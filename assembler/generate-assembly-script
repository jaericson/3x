#!/usr/bin/env bash
# generate-assembly-script -- generate an experiment assembly script that
#                             reflects the logic of the given pattern
#                             directories
# 
# > generate-assembly-script PATTDIR...
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2012-11-01
set -eu

[ $# -gt 0 ] || usage "$0" "No PATTDIR given"

shopt -s extglob
set -o braceexpand

codeForPatternDirs() {
    local nestingLevel=$((${nestingLevel:--1} + 1))
    local pattDir= patt= name=
    for pattDir; do
        [ -d "$pattDir" ] || continue
        echo "# $pattDir"
        # handle some special cases
        case $pattDir in
            # program need not any guards
            program)
                codeForMatchedPatternDir "$pattDir"
                continue
                ;;
            # outputs themselves need not any guards
            output/+([^/]))
                name=${pattDir#output/}
                checkIfNameIsSane "$name" "$pattDir" || continue
                codeForMatchedPatternDir "$pattDir"
                continue
                ;;
        esac
        patt=$(basename "$pattDir")
        case $patt in
            *=?*)
                name=${patt%%=*}
                checkIfNameIsSane "$name" "$pattDir" || continue
                echo "if [ x\"\${$name:-}\" = x'${patt#*=}' ]; then" # NOTE no need to escape since it's a sane value
                codeForMatchedPatternDir "$pattDir"
                echo "fi"
                ;;
            *) # or *=)
                name=${patt%%=}
                checkIfNameIsSane "$name" "$pattDir" || continue
                echo "case \${$name:-} in"
                for pattCaseDirOrig in "$pattDir"/*/; do
                    [ -d "$pattCaseDirOrig" ] || continue
                    local pattCase=$(basename "$pattCaseDirOrig")
                    local pattCaseDir=${pattCaseDirOrig%/}
                    case $pattCase in *=*) continue ;; esac # skip nested pattern dirs
                    checkIfValueIsSane "$pattCase" "$name" "$pattCaseDirOrig" || continue
                    echo "'$pattCase')" # NOTE no need to escape since it's a sane value
                    codeForMatchedPatternDir "$pattDir"
                    codeForMatchedPatternDir "$pattCaseDir"
                    echo ";;"
                done
                if [[ $nestingLevel = 0 ]]; then
                    echo "*)"
                    echo "error \"$name\${$name:+=\${$name:-}} undefined\""
                    echo ";;"
                fi
                echo "esac"
                ;;
        esac
    done
}

codeForMatchedPatternDir() {
    local f=$1; shift
    codeForSourcing "$f"/env
    echo import "$f"
    # look for nested pattern directories and generate code for them too
    codeForPatternDirs "$f"/+([A-Za-z0-9@%:.+_-])=*
}

codeForSourcing() {
    local env=$1; shift
    if [ -r "$env" ]; then
        echo source "$env"
    fi
}

. "$TOOLSDIR"/sanity-checks.sh

echo '#!/usr/bin/env bash
# Usage: .../.3x/assemble.sh [INPUT_NAME=VALUE]... -- [ENV_NAME=VALUE]...
set -eu

: ${_3X_ROOT:=$(cd "$(dirname "$0")"/..; pwd -P)}
export _3X_ROOT
type error import >/dev/null

be-quiet +3 || set -x

# create the directory to be assembled
mkdir -p -- "$1"/workdir
cd "$1"
shift
trap "rm -f assembly.in-progress" EXIT
touch assembly.in-progress
: >assembly

# record and declare input parameters and environment variables
: >env; : >input; _3X__paramIsInput=true
for _3X__param; do
    case $_3X__param in --) _3X__paramIsInput=false; continue ;; esac
    echo "$_3X__param" >>env
    $_3X__paramIsInput || continue
    declare -r "$_3X__param"
    echo "$_3X__param" >>input
done
unset _3X__param _3X__paramIsInput


# define how each iteration of assembly works
assemble1() {'
codeForPatternDirs "$@"
echo '}

# define/override some commands used in the assembly script
error() {
    echo "$*" >>assembly.error
    command error "$@"
}

source() {
    # replace source with our function that avoids any evaluation in the definitions
    local _3X__f=$1 # FIXME avoid name collisions
    ! grep -qxF "${_3X__f%/env}" assembly || return 0
    local _3X__decl= _3X__v= _3X__l=1
    while read -r _3X__decl; do
        let _3X__l++
        _3X__decl=${_3X__decl%%*([ 	])#*}
        [ -n "$_3X__decl" ] || continue
        _3X__v=${_3X__decl%%=*}
        ! declare -p $_3X__v &>/dev/null || error "$_3X__f: line $_3X__l: $_3X__v: duplicate variable"
        export "$_3X__decl"
        declare -r $_3X__v
        _3X_ASSEMBLY_CONTINUE=true
    done <"$_3X_ROOT/$_3X__f"
}
import() {
    local _3X__path
    for _3X__path; do
        ! grep -qxF "$_3X__path" assembly || continue
        echo "$_3X__path" >>assembly
        _3X_ASSEMBLY_CONTINUE=true
        command import "$_3X__path"
    done
}

# repeat iterations until no change
_3X_ASSEMBLY_CONTINUE=true
while $_3X_ASSEMBLY_CONTINUE; do
    _3X_ASSEMBLY_CONTINUE=false
    assemble1
done

# make sure all essential files exist
[ -x workdir/run ] || error "No executable \`run'\'' was assembled"
for _3X__f in env args stdin; do
    [ -e "$_3X__f" ] || touch "$_3X__f"
done

echo >execute.sh '\'
sed "s/'/'\\\\''/g" <"$DATADIR"/assembler/execute.sh
echo \''
chmod +x execute.sh

rm -f assembly.error'
