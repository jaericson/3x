#!/usr/bin/env bash
# generate-assembly-script -- generate an experiment assembly script that
#                             reflects the logic of the given pattern
#                             directories
# Usage: generate-assembly-script PATTDIR...
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2012-11-01
set -eu

[ $# -gt 0 ] || usage "$0" "No PATTDIR given"

shopt -s extglob
set -o braceexpand

codeForPatternDirs() {
    local nestingLevel=$((${depth:--1} + 1))
    local pattDir= patt= name=
    for pattDir; do
        [ -d "$pattDir" ] || continue
        echo "# $pattDir"
        case $pattDir in
            # measurements themselves need not any guards
            measure/+([^/]))
                name=${pattDir#measure/}
                checkIfNameIsSane "$name" "$pattDir"
                codeForMatchedPatternDir "$pattDir"
                continue
                ;;
        esac
        patt=$(basename "$pattDir")
        case $patt in
            *=?*)
                name=${patt%%=*}
                checkIfNameIsSane "$name" "$pattDir"
                echo "if [ x\"\${$name:-}\" = x'${patt#*=}' ]; then"
                codeForMatchedPatternDir "$pattDir"
                echo "fi"
                ;;
            *) # or *=)
                name=${patt%%=}
                checkIfNameIsSane "$name" "$pattDir"
                echo "case \${$name:-} in"
                for pattCaseDirOrig in "$pattDir"/*/; do
                    [ -d "$pattCaseDirOrig" ] || continue
                    pattCase=$(basename "$pattCaseDirOrig" .env)
                    pattCaseDir=${pattCaseDirOrig%/}
                    checkIfValueIsSane "$pattCase" "$name" "$pattCaseDirOrig"
                    echo "\"$pattCase\")"
                    codeForMatchedPatternDir "$pattDir"
                    codeForMatchedPatternDir "$pattCaseDir"
                    echo ";;"
                done
                if [[ $nestingLevel = 0 ]]; then
                    echo "*)"
                    echo "error \"$name\${$name:+=\${$name:-}} undefined\""
                    echo ";;"
                fi
                echo "esac"
                ;;
        esac
    done
}

codeForMatchedPatternDir() {
    local f=$1; shift
    codeForSourcing "$f"/env
    echo import "$f"
    # look for nested pattern directories and generate code for them too
    codeForPatternDirs "$f"/?*=*
}

codeForSourcing() {
    local env=$1; shift
    if [ -r "$env" ]; then
        echo source "$env"
    fi
}

. "$TOOLSDIR"/sanity-checks.sh

codeForPatternDirs "$@"
