#!/usr/bin/env bash
# generate-assembly-script -- generate an experiment assembly script that
#                             reflects the logic of the given pattern
#                             directories
# Usage: generate-assembly-script PATTDIR...
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2012-11-01
set -eu

[ $# -gt 0 ] || usage "$0" "No PATTDIR given"

codeForPatternDirs() {
    for pattDir; do
        [ -e "$pattDir" ] || continue
        echo "# $pattDir"
        patt=$(basename "$pattDir")
        case $patt in
            *=?*)
                echo "if [ x\"\${${patt%%=*}:-}\" = x'${patt#*=}' ]; then"
                codeForMatchedPatternFile "$pattDir"
                echo "fi"
                ;;
            *) # or *=)
                echo "case \${${patt%=}:-} in"
                for pattCaseFile in "$pattDir"/*/ "$pattDir"/*.env; do
                    [ -e "$pattCaseFile" ] || continue
                    pattCaseFile=${pattCaseFile%/}
                    pattCase=$(basename "$pattCaseFile" .env)
                    echo "\"$pattCase\")"
                    codeForMatchedPatternFile "$pattCaseFile"
                    echo ";;"
                done
                echo "esac"
                ;;
        esac
    done
}

codeForMatchedPatternFile() {
    local f=$1; shift
    if [ -d "$f" ]; then
        echo import "$f"
        codeForSourcing "$f"/env
        # look for nested pattern directories and generate code for them too
        codeForPatternDirs "$f"/*=*
    else
        echo import "$f"
        codeForSourcing "$f"
    fi
}

codeForSourcing() {
    local env=$1; shift
    if [ -r "$env" ]; then
        echo source "$env"
    fi
}

codeForPatternDirs "$@"
