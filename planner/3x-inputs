#!/usr/bin/env bash
# 3x-inputs -- enumerate input variables
# 
# > 3x inputs [-v] [NAME]...
# 
# Enumerates all available input variables.  If a NAME is given, it checks
# if the variable is defined and enumerates.
# 
# Specify -v if you want to enumerate the possible values for each name as well.
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2012-11-07
set -eu
shopt -s extglob

# process options
showUnit=false
showType=false
enumValues=false
while getopts "utv" opt; do
    case $opt in
        v)
            enumValues=true
            ;;
        t)
            showType=true
            ;;
        u)
            showUnit=true
            ;;
    esac
done
shift $(($OPTIND - 1))


# setup environment
_3X_ROOT=$(3x-findroot)
export _3X_ROOT
cd "$_3X_ROOT"

# prepare pattern directories to show
if [ $# -eq 0 ]; then
    # default is to show all input variables
    set -- program input/[A-Za-z_]*([A-Za-z0-9_])=
else
    # map each input name to pattern directory
    args=()
    for name in "$@"; do
        if [[ $name == "program" ]]; then
            path=program
        else
            path=input/$name=
        fi
        [ -d "$path" ] || error "Undefined input: $name"
        args+=("$path")
    done
    set -- "${args[@]}"
fi

# finally, show them with values when necessary
showInputNamePart() {
    local name=$1; shift
    local pattDir=$1; shift
    unit=; ! $showUnit || unit=$({ cat "$name"/unit     2>/dev/null || echo; } | tr -d '\n')
    type=; ! $showType || type=$({ cat "$name"/datatype 2>/dev/null || echo; } | tr -d '\n')
    ! $showType || [ -n "$type" ] || type=nominal
    echo "$name${unit:+($unit)}${type:+:$type}$*"
}
if $enumValues; then
    showInput() {
        local name=$1
        local pattDir=$2
        local values=$(
            cd "$pattDir"
            find +([A-Za-z0-9@%:.+_-])/env -maxdepth 0 2>/dev/null | sort -g |
            while read -r path; do
                [ -e "$path" ] || continue
                echo -n ",$(basename "${path%/env}")"
            done
        )
        values=${values#,}
        showInputNamePart "$@" "=$values"
    }
else
    showInput() { showInputNamePart "$@"; }
fi
for path in "$@"; do
    [ -e "$path" ] || continue
    name=$(basename "$path")
    name=${name%%=*}
    showInput $name "$path"
done
