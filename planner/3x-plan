#!/usr/bin/env bash
# 3x-plan -- plan experimental runs
# Usage:
#   3x plan [PROGRAM] [NAME[=VALUE[,VALUE]...]]...
#     New runs can be added to the queue with the combination of given values
#     for the input variables.  The current queue can be specified by setting
#     the environment variable $_3X_QUEUE, e.g., `export _3X_QUEUE=alt` to use
#     run/queue.alt/.  The default queue is run/queue/.
# 
#     For a full combination of inputs, simply run: `3x plan program`
#     Use `3x inputs -v` to list allowed values for available input variables.
# 
#   3x plan
#     Planned runs for the current queue can be edited using your $EDITOR.
# 
#   3x plan results RESULTS_QUERY
#   3x plan skip    RESULTS_QUERY
#     Another way to plan more runs is based on the results so far.  You can
#     narrow down the list of results and use the same set of inputs to plan
#     more experiments.  If you want to run inputs complementary to a set of
#     results, that is also possible with `3x plan skip`.  In this alternative
#     usage, you can plan more runs conditioning on the outputs so far.
# 
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2012-11-07
set -eu

. "$TOOLSDIR"/find-queue.sh

# do a sanity check before we proceed
update-assembly-script >/dev/null

# create the queue directory if needed
mkdir -p -- "$queueDir"
[ -e "$queueDir"/plan ] || touch "$queueDir"/plan

# knowing how to generate combinations is important
permute() {
    local prefix=$1; shift
    if [[ $# == 0 ]]; then
        echo "$prefix"
    else
        local varSpec=$1; shift
        local name=${varSpec%%=*}
        local OIFS=$IFS
        IFS=,
        local values=(${varSpec#$name=})
        IFS=$OIFS
        local value=
        prefix+=" $name="
        for value in "${values[@]}"; do
            permute "$prefix$value" "$@"
        done
    fi
}

tmp=$(mktemp -d "$queueDir"/plan.XXXXXX)
trap "rm -rf -- $tmp" EXIT
planSHA1orig=$(sha1sum <"$queueDir"/plan)
planWithFiles=()

# decide how we want to plan
case ${1:-} in
    with) # based on the given files
        shift
        if [ $# -gt 0 ]; then
            for f; do
                # adjust _3X_ROOT-relative paths
                [ -e "$f" ] ||
                    ! [ -e "$_3X_ROOT/$f" ] || f="$_3X_ROOT/$f"
                planWithFiles+=("$(readlink -f "$f")")
            done
            set -- "${planWithFiles[@]}"
        fi
        [ -t 0 -a -t 1 ] || EDITOR=true
        {
            cat "$@"
            echo
        } >"$tmp"/new
        ;;

    results|skip) # based on query over results
        results=$1; shift
        invertResults=false; case $results in skip) invertResults=true ;; esac

        # record the query and fetch the results
        echo "$@" >"$tmp"/results.query
        3x-results "$@" >"$tmp"/$results

        # transform the results into a plan
        cut -f$(( 1 + $(3x-outputs | wc -l) + 1 ))- <"$tmp"/$results |
        if $invertResults; then # TODO invert from the combination
            excl="$tmp"/skipped
            sort | column -t >"$excl"
            permute "" $(normalize-inputs -v \
                $(tr ' \t' '\n' <"$excl" | sed -n 's/=.*//p' | sort -u)) |
                sort | column -t |
            comm -13 "$excl" -
        else awk '!seen[$0] {seen[$0]++;print}' # filter duplicate inputs
        fi |
        sed 's/^/3x[[:space:]][[:space:]]*run[[:space:]][[:space:]]*/' | column -t >"$tmp"/new
        ;;

    "") # edit the current plan
        if [ -s "$queueDir"/plan ]; then
            cat "$queueDir"/plan >"$tmp"/new
        else # show usage first if empty
            usage "$0" "Empty plan for $queue; specify PROGRAM or input variables to add runs"
        fi
        ;;

    *) # by editing combinations generated from given input values
        # normalize command-line arguments
        args=($(normalize-inputs -nv "$@"))
        [ ${#args[@]} -eq 0 ] && set -- || set -- "${args[@]}"

        # permute the arguments and generate a plan
        msg "Permuting inputs for ${@%%=*}..."
        permute "3x run" "$@" | column -t >"$tmp"/more
        planSHA1orig=$(sha1sum <"$queueDir"/plan)
        cat "$queueDir"/plan "$tmp"/more >"$tmp"/new
        ;;
esac

cd "$queueDir"

# let user do a finish edit of the generated plan
if edit "$tmp"/new "$tmp"/timestamp; then
    sanitize() {
        local i=$1 o=$2
        # check if every line starts with `3x run '
        ! grep -Hn -E -v '^3x[[:space:]]+run[[:space:]]+|^[[:space:]]*$' "$i" ||
            error "Syntax Error: All plan lines must start with \`3x run '" || return $?
        # discard empty lines
        grep -E -v '^[[:space:]]*$' <"$i" >"$o" || true
        # Skip checks of serials at the end of each line, since this is 3x-starts' job
        #! grep -E -v '[[:space:]]+#[[:digit:]]+$' "$o" ||
        #    error "$_3X_QUEUE/$i"': all plan lines must end with #SERIAL where SERIAL is a decimal number'
        # TODO check whether all input values are sane
    }
    confirm-if-changed() {
        if ! [ x"$planSHA1orig" = x"$(sha1sum <plan)" ]; then
            # show error if changed
            error "Plan for $queue changed since editing" || true
            if [ -t 0 -a -t 1 ]; then
                # confirm overwrite
                while :; do
                    read -n 1 -p "Overwrite and discard changes? (y/n) " || true
                    echo
                    case $REPLY in
                        [yY]) return 0 ;;
                        [nN]) break ;;
                    esac
                done
            fi
            false
        fi
    }
    sanitize "$tmp"/new "$tmp"/sanitized &&
    confirm-if-changed ||
    {
        # in case there's error, keep the erroneous one for later retries
        savedPlan=$(mktemp "$_3X_ROOT"/.3x/plan.editing.XXXXXX)
        cp -pf "$tmp"/new $savedPlan
        msg "Edit the file and retry with the following command:"
        msg "  3x plan with ${savedPlan#$_3X_ROOT/}"
        false
    }
    mv -f "$tmp"/sanitized plan
    if [ ${#planWithFiles[@]} -gt 0 ]; then
        # clean up any temporary file for `plan with`
        for f; do
            case $f in
                "$_3X_ROOT"/.3x/plan.editing.*)
                    rm -f "$f"
                    ;;
            esac
        done
    fi
else
    msg "No changes made to plan for $queue"
    exit 2
fi

# and summarize the new plan for queue
msg "3x: updated plan for $queue ($(wc -l <plan) runs)"

# and notify queue-changed if already started,
if [ -e started ]; then
    . "$TOOLSDIR"/find-queue-runner.sh
    setsid queue-changed
else # or give instructions how to start the queue
    msg "To start executing, run:"
    msg "  3x start"
fi
