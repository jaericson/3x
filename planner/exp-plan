#!/usr/bin/env bash
# exp-plan -- plan experiments with given variables
# Usage: exp plan [PROGRAM] [NAME[=VALUE[,VALUE]...]]...
# 
# Use `exp conditions -v` to list available condition variables.
# 
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2012-11-07
set -eu

[ $# -ge 1 ] || {
    usage "$0" "At least program or one condition variable must be given" || true
    # show available variables
    echo
    echo "For full combination of conditions, run: "
    echo "  exp plan "$(exp-conditions)
    false
}

: ${EDITOR:=vim}
: ${EXPROOT:=$(exp-findroot)}
: ${EXPBATCH:=$(new-batch-id)}
export EXPROOT EXPBATCH

## normalize command-line arguments
args=($(normalize-conditions -nv "$@"))
[ ${#args[@]} -eq 0 ] && set -- || set -- "${args[@]}"

## finally, we're ready to permute the arguments and generate a batch plan
cd "$EXPROOT"

# create the batch directory
trap 'rm -rf "$EXPBATCH"' EXIT
mkdir -p "$EXPBATCH"

# and permute arguments
msg "Permuting conditions for ${@%%=*}..."
permute() {
    local prefix=$1; shift
    if [[ $# == 0 ]]; then
        echo "$prefix"
    else
        local varSpec=$1; shift
        local name=${varSpec%%=*}
        local OIFS=$IFS
        IFS=,
        local values=(${varSpec#$name=})
        IFS=$OIFS
        local value=
        prefix+=" $name="
        for value in "${values[@]}"; do
            permute "$prefix$value" "$@"
        done
    fi
}
permute "exp run" "$@" | column -t >"$EXPBATCH"/plan

progress="$EXPBATCH"/exp.planning.in-progress
touch -r "$EXPBATCH"/plan "$progress"
$EDITOR "$EXPBATCH"/plan
if [ "$EXPBATCH"/plan -nt "$progress" ]; then
    rm -f "$progress"
    trap - EXIT
else
    error "Aborted planning"
fi

msg +0 -n "Batch created at "
echo "$EXPBATCH"
if ! ${EXPBATCH_STARTING:-false}; then
    msg "To start the batch, run:"
    msg "  exp start $EXPBATCH"
fi
