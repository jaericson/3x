#!/usr/bin/env bash
# exp-conditions -- enumerate condition variables
# Usage: exp conditions [-v] [NAME]...
# 
# Enumerates all available condition variables.  If a NAME is given, it checks
# if the variable is defined and enumerates.
# 
# Specify -v if you want to enumerate the possible values for each name as well.
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2012-11-07
set -eu

# process options
enumValues=false
while getopts "v" opt; do
    case $opt in
        v)
            enumValues=true
            ;;
    esac
done
shift $(($OPTIND - 1))


# setup environment
EXPROOT=$(exp-findroot)
export EXPROOT
cd "$EXPROOT"

# prepare pattern directories to show
if [ $# -eq 0 ]; then
    # default is to show all condition variables
    set -- program condition/*=*
else
    # map each condition name to pattern directory
    args=()
    for name in "$@"; do
        if [[ $name == "program" ]]; then
            path=program
        else
            path=condition/$name=
        fi
        [ -d "$path" ] || error "Undefined condition: $name"
        args+=("$path")
    done
    set -- "${args[@]}"
fi

# finally, show them with values when necessary
if $enumValues; then
    showCondition() {
        local name=$1
        local pattDir=$2
        local values=$(
            cd "$pattDir"
            find *{/,.env} -maxdepth 0 2>/dev/null | sort -g |
            while read -r path; do
                [ -e "$path" ] || continue
                echo -n ",$(basename "${path%.env}")"
            done
        )
        values=${values#,}
        echo "$name=$values"
    }
else
    showCondition() { echo "$1"; }
fi
for path in "$@"; do
    [ -e "$path" ] || continue
    name=$(basename "$path")
    name=${name%%=*}
    showCondition $name "$path"
done
