#!/usr/bin/env bash
# normalize-conditions -- normalize condition specification
# Usage: normalize-conditions -[nvp] [NAME[=VALUE[,VALUE]...]]...
#        normalize-conditions -[nvp] DIR...
# 
# In addition to the obvious NAME=VALUE pairs, this also understands paths both
# relative and absolute to either condition variables or values of condition
# variables under the $EXPROOT, so you can rely on shell's file path completion.
# 
# Specify -n option to prepend any missing NAME.
# Specify -v to attach possible values for each NAME without any VALUE as well.
# Specify -p to pass thru any unrecognized argument. Otherwise, it will cause an error.
# 
# For processing arguments to a script, use as follows:
#   args=($(normalize-conditions "$@"))
#   [ ${#args[@]} -eq 0 ] && set -- || set -- "${args[@]}"
# 
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2012-11-07
set -eu

# process options
fillNames=false
fillValues=false
passUnrecognized=false
while getopts "nvp" opt; do
    case $opt in
        n)
            fillNames=true
            ;;
        v)
            fillValues=true
            ;;
        p)
            passUnrecognized=true
            ;;
    esac
done
shift $(($OPTIND - 1))

[ $# -gt 0 ] || exit 0

: ${EXPROOT:=$(exp-findroot)}

## normalize command-line arguments
args=()
restArgs=()
for cond in "$@"; do
    if [ -e "$cond" ]; then # infer condition name/value from path names
        # e.g., program/f/ condition/x=/1 condition/x=/2.env condition/y=abcd condition/z=/
        #    -> program=f x={1,2} y=abcd z
        cond=$(readlink -f "$cond")
        [ -d "$cond" ] || cond=${cond%.env}
        cond=${cond#$EXPROOT/}
        case $cond in
            program|condition)
                args+=("$cond"=)
                ;;
            program/*)
                args+=(program="$(basename "$cond")")
                ;;
            condition/*=*)
                name=${cond#condition/}
                name=${name%%=*}
                value=${cond#condition/$name=}
                value=$(basename "$value")
                args+=("$name=$value")
                ;;
        esac
    else # or, sanitize cond
        # first check if it's a program name
        case $cond in
            *=*) ;;
            *)
                if [ -d "$EXPROOT"/program/"$cond" ]; then
                    cond="program=$cond"
                fi
                ;;
        esac
        # then see if it's a valid condition
        name=${cond%%=*}
        if [[ $name == "program" ]]; then
            pattDir="$EXPROOT"/program
        else
            pattDir="$EXPROOT"/condition/$name=
        fi
        if ! [ -d "$pattDir" ]; then
            if $passUnrecognized; then
                # hold unrecognized arguments for output
                restArgs+=("$cond")
                continue
            else
                error "Undefined condition $cond"
            fi
        fi
        valuePart=${cond#$name}
        valuePart=${valuePart#=}
        if [ -n "$valuePart" ]; then
            values=
            OIFS=$IFS
            IFS=,
            values=($valuePart)
            IFS=$OIFS
            for value in "${values[@]}"; do
                [ -e "$pattDir/$value" -o -e "$pattDir/$value.env" ] ||
                    error "Undefined condition: $name=$value"
            done
        fi
        args+=("$name=$valuePart")
    fi
done
[ ${#args[@]} -gt 0 -o ${#restArgs[0]} -gt 0 ] || exit 0
[ ${#args[@]} -eq 0 ] && set -- || set -- "${args[@]}"

# group by var names
#  e.g., program=f program=g x=1 x=2 y=abcd z=
#     -> program=f,g x=1,2 y=abcd z
set -- $(coffee -e '
[_,_,_,_, args...] = process.argv
ordering = []
values = {}
for arg in args
    [name,vs] = arg.split "=", 2
    ordering.push name unless name in ordering
    values[name] ?= {}
    if vs?
        for v in vs.split ","
            values[name][v] ?= 0
            values[name][v]++
for name in ordering
    console.log "#{name}=#{(v for v,freq of values[name]).join ","}"
' "$@")

# all the variables must be there, so prefix them
if $fillNames; then
    arg-has() {
        local name=$1 arg=; shift
        for arg; do
            [[ $arg =~ $name ]] || continue
            return 0
        done
        return 1
    }
    args=()
    for name in $(exp-conditions); do
        arg-has "$name(=*)?" "$@" || args+=("$name"=)
    done
    [ ${#args[@]} -eq 0 ] || set -- "${args[@]}" "$@"
fi

# fill possible values for names with empty ones
if $fillValues; then
    args=()
    for cond in "$@"; do
        name=${cond%%=*}
        values=${cond#$name=}
        [ -n "$values" ] || cond=$(exp-conditions -v "$name")
        args+=("$cond")
    done
    [ ${#args[@]} -gt 0 -o ${#restArgs[0]} -gt 0 ] || exit 0
    [ ${#args[@]} -eq 0 ] && set -- || set -- "${args[@]}"
fi

# append any unrecognized arguments
! $passUnrecognized || [ ${#restArgs[@]} -eq 0 ] || set -- "$@" "" "${restArgs[@]}"

# output the normalized arguments, so it can be used in the following manner:
#   set -- $(normalize-conditions "$@")
for arg in "$@"; do
    # TODO escape whitespace?
    echo "$arg"
done
