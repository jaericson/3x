#!/usr/bin/env bash
# compile-filter -- compile given expressions into a shell script
# Usage: compile-filter [NAME[[=|<>|!=]VALUE[,VALUE]... | [<|<=|>=|>]VALUE]]... >filter
#        chmod +x filter
#        ./filter $_3X_RUN/output
#        find ... -exec ./filter {} \; -print
#
#
# You can test/debug this with the hack command like this:
#    3x hack compile-filter exectime\<200000 workers=2,4 graph=v25e4 |
#      sh -xs -- run/2012/11/30/012900.970453277/output
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2012-11-30
set -eu
shopt -s extglob

cat <<HEAD
#!/usr/bin/env bash
set -eu; shopt -s extglob
source "\${1%output}input"
source "\$1"

HEAD
# for debugging: print >>stderr, v

numOrStr() {
    case $1 in
        @(|+|-)@(+([0-9])?(.+([0-9]))|.+([0-9]))?([eE]@(|+|-)+([0-9])))
            echo -n "$1" # number
            ;;
        *) # string
            echo -n '"'"${1//'"'/'\"'}"'"'
            ;;
    esac
}

for cond; do
    case $cond in
        # exclusion; not equal to
        *@(<>|!=)*)
            name=${cond%%@(<>|!=)*}; values=${cond##$name@(<>|!=)}
            patt=$values; patt=${patt//'|'/'\|'}; patt=${patt//','/'|'}
            echo "[[ \$$name = !($patt) ]]"
            ;;

        # inequalities
        *@(<=|>=|<|>)*)
            name=${cond%%@(<=|>=|<|>)*}; value=${cond##$name@(<=|>=|<|>)}
            o=${cond%$value}; o=${o#$name}
            v=$(numOrStr "$value")
            case $v in 
                '"'*'"')
                    echo "[[ \$$name $o $v ]]"
                    ;;
                *)
                    echo "[[ \$(bc <<<\"\$$name $o $v\" 2>/dev/null) = 1 ]]"
                    # XXX bc is much more powerful (arbitrary precision) but
                    # not that slower than shell's builtin [[ comparisons,
                    # which can only do int arithmetics.
                    #case $o in
                    #    "<") O=-lt ;; "<=") O=-le ;;
                    #    ">") O=-gt ;; ">=") O=-ge ;;
                    #esac
                    #echo "[[ \$$name $O $(numOrStr "$value") ]]"
                    ;;
            esac
            ;;

        # membership; equals
        *=*)
            name=${cond%%=*}; values=${cond#$name=}
            patt=$values; patt=${patt//'|'/'\|'}; patt=${patt//','/'|'}
            echo "[[ \$$name = @($patt) ]]"
            ;;

        *)
            error "$cond: Invalid query syntax"
            ;;
    esac
done
