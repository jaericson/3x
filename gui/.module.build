#!/usr/bin/env bash
set -eu
shopt -s extglob nullglob

Self="$(cd "$(dirname "$0")" && pwd -P)/$(basename "$0")"

mkdir -p .build/files
cd .build

ln -sfn ../package.json .
[ node_modules -nt package.json ] || {
    echo >README.md
    npm install
    touch node_modules
}

#  server depends on some python packages, e.g., watchdog
[ -d python-packages -a python-packages -nt "$Self" ] || {
    echo >&2 "Bundling python packages..."
    dir_pypkgs="$PWD/python-packages"
    dir_easy_install="$PWD/python-packages.easy_install"
    export PYTHONPATH="$dir_pypkgs"
    mkdir -p -- "$dir_pypkgs"
    python_version=$(python -V 2>&1 | sed 's/.*Python \([0-9]*\.[0-9]*\).*/\1/')
    easy_install=easy_install-$python_version
    type $easy_install &>/dev/null || {
        # use a local copy of easy_install
        export PYTHONPATH="$dir_easy_install:$PYTHONPATH"
        export PATH="$dir_easy_install:$PATH"
        type $easy_install &>/dev/null || {
            # install a local copy of easy_install
            mkdir -p -- "$dir_easy_install"
            curl -s http://peak.telecommunity.com/dist/ez_setup.py |
            python -- - --install-dir "$dir_easy_install"
            type $easy_install &>/dev/null || {
                echo >&2 "$easy_install: command not found"
                exit 127
            }
        }
    }
    $easy_install --install-dir "$dir_pypkgs" --always-copy \
        watchdog \
        #
    # fix hard-coded Python interpreter
    {
        echo '/^#!/d'
        echo 'i'
        echo '#!/usr/bin/env python'
        echo '.'
        echo 'wq'
    } | ed "$dir_pypkgs"/watchmedo >/dev/null
}

cd ..
compile-coffee-to() {
    local dest=$1; shift
    for cs; do
        js=${cs%.coffee}.js
        js=${js##*/}
        [[ "$cs" -nt "$dest"/"$js" ]] || continue
        echo >&2 "Compiling $cs..."
        coffee -c -o "$dest" "$cs" &
    done
    wait
}
compile-coffee-to .build  *.coffee


## client
filesBuilt=.build/files
resourcesBuilt=.build/files/resource
mkdir -p "$resourcesBuilt"

# compile client source code
cd client
#  first generate executable sources
for src in *.in; do
    out=../"$filesBuilt"/${src%.in}
    [[ "$src" -nt "$out" ]] || continue
    echo >&2 "Compiling $src..."
    compile-xdocs <"$src" >"$out"
done
#  and compile CoffeeScripts
compile-coffee-to ../"$resourcesBuilt"  *.coffee */*.coffee ../"$filesBuilt"/*.coffee
cd ..

# get jquery
( cd extern/jquery
[ -s dist/jquery.js ] || {
    echo >&2 "Building jquery..."
    npm install
    grunt dist
}
)

( cd extern/jquery-ui
[ -s dist/minified/jquery.ui.core.min.js ] || {
    echo >&2 "Building jquery-ui..."
    npm install
    grunt min
}
)

# build knockoutjs
( cd extern/knockout
[ -s build/output/knockout-latest.debug.js ] || {
    echo >&2 "Building knockout..."
    npm install
    grunt build:debug
}
)

# build bootstrap
( cd extern/bootstrap
[ -s bootstrap/js/bootstrap.js ] || {
    echo >&2 "Building bootstrap..."
    npm install
    make bootstrap-js
    git config core.excludesfile ../bootstrap.gitignore
}
)


cd "$resourcesBuilt"
clientFromResourcesBuilt=../../../client
externRoot=../../../extern

# prepare for stylesheet compilations
[ -d bootstrap/less ] || {
    rm -rf bootstrap
    mkdir -p bootstrap/
    cp -af "$externRoot"/bootstrap/less bootstrap/
    # remove sprites.less in favor of Font-Awesome
    rm -f bootstrap/less/sprites.less
    echo "//" >bootstrap/less/sprites.less
}
ln -sfn "$externRoot"/Font-Awesome

# compile LESS
for less in "$clientFromResourcesBuilt"/*.less "$clientFromResourcesBuilt"/../"$filesBuilt"/*.less; do
    css=${less%.less}.css
    css=${css##*/}
    [[ "$less" -nt "$css" ]] || continue
    echo >&2 "Compiling $resourcesBuilt/$less..."
    lessc "$less" "$css"
done
