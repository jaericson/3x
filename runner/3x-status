#!/usr/bin/env bash
# 3x-status -- Show status of queues
# Usage: 3x queues [-OPTIONS] [QUEUE_FILTER]...
# 
# Show status of all queues whose name contains QUEUE_FILTER.
# 
# To see the full history of queues:
#     3x status -h QUEUE_FILTER
#     3x history
# 
# To see a quick listing of queues:
#     3x status -l
# 
# To only count the number of queues:
#     3x status -c QUEUE_FILTER
#
# Author: Jaeho Shin <netj@cs.stanford.edu>
# Created: 2013-01-12
set -eu
TAB=$'\t'
tsvline() {
    local line= col=
    for col
    do line+="$TAB$col"
    done
    echo "${line#$TAB}"
}

ListDetails=true
ShowCount=false
while getopts "cl" o; do
    case $o in
        c) ShowCount=true ListDetails=false ;;
        l) ListDetails=false ;;
    esac
done
shift $(($OPTIND - 1))

Query=$*

_3X_ROOT=$(3x-findroot)
cd "$_3X_ROOT"/run/queue

limitOffset ls -td *"$Query"*/ 2>/dev/null |
if $ListDetails; then
    {
    tsvline \
        "queue" \
        "state" \
        "#planned" \
        "#running" \
        "#done" \
        #
    while read -r queue; do
        queue=${queue%/}
        {
            # TODO use a dedicated flag for queue RUNNING state
            state=STOPPED
            ! [ -e $queue/started ] || state=RUNNING
            numPlanned=$(wc -l <$queue/plan    || echo 0)
            numRunning=$(wc -l <$queue/running || echo 0)
            numDone=$(   wc -l <$queue/done    || echo 0)
        } 2>/dev/null

        # TODO move below to local/queue-poll
        #  # determine running ones
        #  for pidfile in $queue/worker-*.lock; do
        #      if lockproc $pidfile alive; then
        #          state=RUNNING
        #          break
        #      fi
        #  done
        #  numRunning=0
        #  for run in $queue/running.*/cmdln; do
        #      [ -e "$run" ] || continue
        #      run=${run%/cmdln}
        #      if lockproc $run/lock alive; then
        #          let ++numRunning
        #          state=RUNNING
        #      else
        #          let ++numRemaining
        #      fi
        #  done

        # output in tab-separated columns
        tsvline \
            "$queue" \
            "$state" \
            "$numPlanned" \
            "$numRunning" \
            "$numDone" \
            #
    done
    } |
    if [ -t 1 ]; then column -t; else cat; fi
elif $ShowCount; then
    wc -l
else
    sed 's:/$::; s:^:run/:'
fi
