{"name":"3x","tagline":"3X â€” a tool for eXecutable eXploratory eXperiments","body":"# <i class=\"icon-beaker\"></i> 3X\r\n## A tool for eXecutable eXploratory eXperiments\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"http://netdna.bootstrapcdn.com/font-awesome/3.0.2/css/font-awesome.css\">\r\n\r\nComputational experiments are everywhere these days.  As data and information\r\nabound at every corner of human activity, computational methods are becoming\r\nan integral part of our intellectual endeavor.  It became crucial nowadays not\r\njust for computer scientists or researchers who deal with computers, but also\r\nfor all kinds of engineers, physical and life scientists, and even for social\r\nscientists to deal with series of experiments that crunch data to discover new\r\nknowledge.\r\n\r\nHowever, computational experiments are frequently done in an ad-hoc manner,\r\nwhich seriously undermines their credibility as well as the experimenters'\r\nproductivity.  Everyone writes his/her own set of scripts for partially\r\nautomating the execution of runs and retrieval of results.  The produced logs\r\nand data are organized in some custom structure that might make sense only to\r\nthose who are actively engaged in the experiment.  As the experiment evolves,\r\nor after a new person joins, or simply after some time passes, such brittle\r\nsetup is almost always guaranteed to fall apart.\r\nAs code for the experiment evolves, its output format usually varies over time\r\nand these scripts must catch up with those changes and cope with existing data\r\nat the same time, quickly creating a huge maintenance burden.  Unless\r\nextraordinary rigor is put into what is often regarded as periphery to one's\r\nmain problem, ad-hoc setups for experiments make it difficult to not only\r\nrepeat the whole process but also observe interesting facts from the\r\naccumulated experimental results.\r\n\r\n*3X* is a software tool that aims to introduce a systematic approach to\r\ncomputational experiments to improve their reliability, while increasing\r\nour productivity.  3X provides you a simple, yet flexible, standard\r\nstructure to organize experiments.  Within such structure, it keeps track\r\nof all the detailed records of your runs in an obvious and efficient way, so\r\nthat anyone can easily inspect individual traces and reproduce the results\r\nlater.  It comes with a powerful graphical user interface (GUI) that not only\r\nvisualizes the results of your experiment so far, but lets you also guide it\r\ntowards a direction that needs more exploration interactively.  Since most of\r\nthe functions regarding the management of experimental tasks and data are\r\nexposed transparently through its command-line interface (CLI), filesystem\r\nhierarchy and file formats.  It is very simple to plug existing systems to 3X\r\nand automate routine jobs on top of it.\r\n\r\nStill, it is very important to understand that conducting a reliable\r\ncomputational experiment remains a challenging problem no matter how advanced\r\nthe tool you use is.  3X is not a magical tool that automatically systematizes\r\nyour experiment.  Although it provides important scaffoldings on which you can\r\nconstruct reliable experiments more easily, the credibility of the experiment\r\nis ultimately up to how much rigor the experimenter puts into it.  Our hope in\r\nbuilding 3X with standard structure and common vocabulary is to make\r\nestablishing a principle become much easier, and practicing it be less\r\nburdensome.\r\n\r\n\r\n## Further Reading\r\n\r\n* [Tutorial with Step-through Examples](https://github.com/netj/3x/tree/master/docs/tutorial/#readme)\r\n\r\n","google":"UA-29293848-3","note":"Don't delete this file! It's used internally to help with page regeneration."}